{
    "contents" : "#setwd(\"~/Dropbox/PHD thesis1/working directory\")\n#setwd(\"/usagers/bebeha/lib\")\nrequire('NMF')\nrequire(ltm)\nsource('utility.R')\nsource('utility2.R')\nsource('lib-poks.R')\nrequire(mirt)\nrequire(multicore)\nrequire(plotrix)\nrequire(CDM)\nlibrary(eRm)\nsource('Performance-lib.R')\n\n#ks.update(6,1,ks$state,ks)[8] = ks$state[8] * ks$or$t[8,6]\n\nR = as.matrix(fraction.subtraction.data)\n#ks = ks.init(R,alpha.c = 0.5,alpha.p = 0.85,p.min = 0.75)\nGen.POKS.Real <- function(R){\n  #Get the KS for each student case (absence of each student is a case)\n  ks.v <- lapply(1:nrow(R), function(i) ks.init(R[-i,], alpha.c = 0.5,alpha.p = 0.85,p.min = 0.75))\n  RG = matrix(NA,nrow(R),ncol(R))\n  for(j in 1:nrow(R)){\n    ks.temp = ks.v[[j]]\n    #Get the odds\n    Odds.temp.state = ks.temp$state\n    for(i in 1:ncol(R))\n      {\n      #Sample for an item\n        RG[j,i] <- sample(0:1,size = 1,prob = c(1- OddsToP(Odds.temp.state[i]),OddsToP(Odds.temp.state[i])))\n        #Odds.temp.state[k] <- ks.update(i,RG[j,i],ks$state,ks)[k]\n        #update others based on their state and Odds ratio\n        if(RG[j,i]==1)\n        {\n          for(k in which(ks.temp$m[i,]==1)){\n            Odds.temp.state[k] <- Odds.temp.state[k]*ks.temp$or$t[k,i]\n          }\n        }else{\n          for(k in which(ks.temp$m[,i]==1)){\n            Odds.temp.state[k] <- Odds.temp.state[k]*ks.temp$or$f[k,i]\n          }\n        }                   \n      }\n    }\n  return(RG)\n}\nGet.Ks.State <- function(Node,PO,State)\n{\n  if(sum(PO[,Node])==0) {res = 0} else\n  {res = max(State[which(PO[,Node]==1)])}\n  level = FindLevel(Node,PO)\n  return(runif(1,res,res+((1-res)/level)))\n}\n#St.Var range is between 0 and 0.3\n#st.Var range is between -0.5 and 0.5\nGen.Synthetic.POKS <- function(Students = 200, Items = 15, SuccessRate = 0.5 , St.Var=0,item.Var=0,LinkNum = 0)\n{\n  #Generate random PO\n  PO = matrix(0,Items,Items)\n  PO[which(upper.tri(PO))] = round(pnorm(rnorm(sum(upper.tri(PO)),mean = LinkNum)))\n  POrig = PO\n  \n  #for student variance we use (x+1/2)^4\n  Student.Variance = pnorm(rnorm(Students,0,St.Var))\n  Student.Variance = (Student.Variance+1/2)^4\n  #Gen initial State\n  State = rep(0,Items)\n  for (j in 1:Items){\n    State[j] = Get.Ks.State(j,PO,State)\n  }\n  State.Org <- ToOdds(State)\n  \n  R = matrix(-1,Students,Items)\n  for(i in 1:Students)\n    {\n      State <- State.Org*Student.Variance[i]\n      ItVar = item.Var\n      if(item.Var>0.3)\n        ItVar = 0.3\n      if(item.Var<0)\n        ItVar = 0\n      #Gen OR.t\n      OR.t = matrix(0.5,Items,Items)\n      OR.t[which(t(PO)==1)] <- runif(sum(PO),0.8-ItVar,1)\n      OR.t <- ToOdds(OR.t)\n      #Gen OR.f\n      OR.f = matrix(0.5,Items,Items)\n      OR.f[which(t(PO)==1)] <- runif(sum(PO),0,0.2+ItVar)\n      OR.f <- ToOdds(OR.f)\n      #Create Samples\n      for(it in 1:ncol(R))\n      {\n        R[i,it] <- sample(0:1,size = 1,prob = c(1- OddsToP(State[it]),OddsToP(State[it])))\n        #Odds.temp.state[k] <- ks.update(i,RG[j,i],ks$state,ks)[k]\n        if(R[i,it]==1)\n        {\n          for(k in which(PO[it,]==1)){\n            State[k] <- State[k]*OR.t[k,it]\n          }\n        }else{\n          for(k in which(PO[,it]==1)){\n            State[k] <- State[k]*OR.f[k,it]\n          }\n        }                   \n      }\n    }\n  res <- list(R,POrig)\n  return(res)\n  \n}\n",
    "created" : 1441862271920.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2416843044",
    "id" : "2F379D3B",
    "lastKnownWriteTime" : 1441981744,
    "path" : "C:/Users/LATITUDE6430/Desktop/Code/POKS.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}