get.par("min.depth, p")
get.par("min.depth",p)
get.par("min.it.per.tree",p)
get.par("Q",p)
get.par("M",p)
get.par("exp",p)
get.par("irt",p)
p
p
p <- pars(p, concepts= 4)
gen("dina",p)
gen("dina",p)$dina
gen("poks",p)
get.par("avg", par)
get.par("avg", p)
p$init.vals$avg
p$init.vals
init <-
)
install(edmsyn)
install('edmsyn')
library(edmsyn)
gen('poks',pars(students = 15, items = 20))
install('edmsyn')
library(edmsyn)
gen('exp',p(items = 15, students = 20))
gen('exp',pars(items = 15, students = 20))
p
p$init.vals
get.par("student.var", p)
get.par("students", p)
get.par("items", p)
get.par("avg", p)
get.par("min.depth",p)
p$init.vals
install('edmsyn')
library(edmsyn)
as.list(match.call())
as.list(environment())
a = function(a = 2, b = 4){}
a = function(a = 2, b = 4){
print as.list(match.call())
print(as.list(match.call()))
a = function(a = 2, b = 4){
print(as.list(match.call()))
print(as.list(environment()))
}
a(2,4)
pwd()
pwd
setwd("~/edmsyn")
printwd
getwd()
library(devtolls)
library(devtools)
library(roxygen2)
install('edmsyn')
setwd('..')
getwd()
install('edmsyn')
library(edmsyn)
edmtree.dump
edmtree.dump()
library(edmsyn)
edmtree.dump()
install('edmsyn')
library(edmsyn)
edmtree.load()
document()
setwd('edmsyn')
document()
setwd('..')
install('edmsyn')
library(edmsyn)
edmtree.dump()
edmtree.fetch('poks')
edmtree.add('new', NULL, list(c('student','items')), NULL, list(function(a, b){return(a+b)}))
node.name = 'new'
tell < -c('student', 'items')
tell <- c('students', 'items')
gen <- list(c('students', 'items'))
f.tell <- function(x){return list(x[[1]], x[[2]])}
f.tell <- function(x){return(list(x[[1]], x[[2]]))}
f.gen <- list(function(a, b){return(list(a,b))})
edmtree.add(node.name, tell, gen, f.tell, f.gen)
debug(edmtree.add(node.name, tell, gen, f.tell, f.gen))
document()
setwd('edmsyn')
document()
setwd('..')
install(edmsyn)
install('edmsyn')
library(edmsyn)
edmtree.add(node.name, tell, gen, f.tell, f.gen)
getwd()
setwd('edmsyn')
document()
setwd('..')
install('edmsyn')
tada()
edmtree.load()
getwd()
setwd('edmsyn')
document()
setwd(..)
setwd('..')
install('edmsyn')
library(edmsyn)
tada()
edmtree.load()
setwd('edmsyn')
document()
setwd('..')
install('edmsyn')
library(edmsyn)
tada()
edmtree.load()
tada()
try
setwd('edmsyn')
document()
document()
setwd('..')
install('edmsyn')
tada()
edmtree.load()
tada()
tryyyy
trieu = new.env()
names(trieu)
assign('a',2,envir=trieu)
get('a',envir=trieu)
names(trieu)
clear(trieu)
rm(list = names(trieu), envir=trieu)
names(trieu)
c('a','b','c')
for (i in c('a','b','c')) {print(i)}
getwd()
setwd('edmsyn')
document()
document()
setwd('..')
install(edmsyn)
install('edmsyn')
library(edmsyn)
setwd('edmsyn')
document()
setwd('..')
install(edmsyn)
install('edmsyn')
library(edmsyn)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
a[[1]](1)
source('~/.active-rstudio-document')
b[[1]]
b[[1]](1)
b[[2]](1)
?assign
source('~/edmsyn/R/container.R')
b[[1]](1)
b[[2]](1)
source('~/edmsyn/R/container.R')
b[[1]]
b[[1]](1)
(function(x){a[[1]](x)} + 1) (3)
a[[1]](3)
1(3)
t <- functoin(x){a[[1]](x)} + 1
t <- function(x){a[[1]](x)} + 1
t
class(t)
assign + 1
a[[1]] + 1
a[[1]](2) + 1
?parent.env
?parent.env
environment()
?environment
toSring(a)
toString(a)
source('~/edmsyn/R/container.R')
source('~/edmsyn/R/container.R')
b[[1]](1)
b[[1]](2)
b[[2]](2)
a = new.env()
t = 1
assign(t, 3, envir = a)
a = list()
a[[1]] = 2
a[[3]] = 4
a
source('~/edmsyn/R/container.R')
b
source('~/edmsyn/R/container.R')
b
b[[1]](2)
b[[2]](2)
library(edmsyn)
node.name = 'new'
tell = c('students')
f.tell = function(x){return(list(x/2))}
gen = list(c('students'),c())
gen = list(c('students'),c('M'))
f.gen = list(function(x){return(x[[1]]*2)}, function(x){return(ncol(x[[1]]))})
tell
gen
f.tell
f.gen
edmtree.add(node.name, tell,gen, f.tell, f.gen)
p <- pars(students = 3)
get.par('new',p)
. <- 1
.
library(devtools)
library(roxygen2)
document()
setwd('..')
install('edmsyn')
library(edmsyn)
library(edmsyn)
edmtree.add(node.name, tell,gen, f.tell, f.gen)
a <- edmtree.fetch('new')
a$tell
a$gen
a$f.gen
a$f.tell
edmtree.add(node.name, tell,gen, f.tell, f.gen)
library(edmsyn)
edmtree.add(node.name, tell,gen, f.tell, f.gen)
a <- edmtree.fetch('new')
a$tell(6)
a$tell
a$f.tell(6)
a$f.gen[[1]](list(3))
a$f.gen[[2]](list(matrix(3,3,1) ))
matrix(3,3,1)
a$f.gen[[2]]
a$gen
a$f.gen
f.gen
f.gen <- list(function(x){return(x*2)}, function(x){return(ncol(x))})
edmtree.add(node.name, tell,gen, f.tell, f.gen)
a <- edmtree.fetch('new')
a$f.gen[[1]](list(3))
a$f.gen[[2]](list(matrix(1,3,3)))
get.par('new',p)
p
library(edmsyn)
get.par('new',p)
edmtree.add(node.name, tell,gen, f.tell, f.gen)
a <- edmtree.fetch('new')
get.par('new',p)
library(edmsyn)
edmtree.add(node.name, tell,gen, f.tell, f.gen)
get.par('new',p)
library(edmsyn)
edmtree.add(node.name, tell,gen, f.tell, f.gen)
get.par('new',p)
library(edmsyn)
edmtree.add(node.name, tell,gen, f.tell, f.gen)
get.par('new',p)
library(edmsyn)
edmtree.add(node.name, tell,gen, f.tell, f.gen)
get.par('new',p)
library(edmsyn)
edmtree.add(node.name, tell,gen, f.tell, f.gen)
get.par('new',p)
a <- function(x) { x+1}
do.call(a, list(1))
library(edmsyn)
edmtree.add(node.name, tell,gen, f.tell, f.gen)
get.par('new',p)
library(edmsyn)
edmtree.add(node.name, tell,gen, f.tell, f.gen)
get.par('new',p)
library(edmsyn)
edmtree.add(node.name, tell,gen, f.tell, f.gen)
get.par('new',p)
library(edmsyn)
edmtree.add(node.name, tell,gen, f.tell, f.gen)
get.par('new',p)
library(edmsyn)
edmtree.add(node.name, tell,gen, f.tell, f.gen)
get.par('new',p)
a <- edmtree.fetch('new')
a
library(edmsyn)
edmtree.add(node.name, tell,gen, f.tell, f.gen)
b <- get.par('new',p)
a <- edmtree.fetch('new')
a
b
a$f.gen[[1]](list(students=3))
a$f.gen[[1]](list(3))
a <- list(students = 3)
a
names(a) <- NULL
a
library(edmsyn)
edmtree.add(node.name, tell,gen, f.tell, f.gen)
get.pars('new')
get.par('new')
get.par('new',p)
library(edmsyn)
edmtree.add(node.name, tell,gen, f.tell, f.gen)
get.par('new',p)
library(edmsyn)
get.par('new',p)
edmtree.add(node.name, tell,gen, f.tell, f.gen)
get.par('new',p)
p
names(p)
get.par('new',p)
get.par('hey',p)
rm(list = ls())
library(edmsyn)
p <- pars(students = 3)
get.par('new',p)
get.par('hey',p)
get.par('new',p)
get.par('hey',p)
get.par('trieu',p)
get.par('new',p)
edmtree.fetch('new')
edmtree.fetch('trieu')
rm(list = ls())
library(edmsyn)
rm(list = ls)
rm(list = ls())
node.name
library(edmtree)
library(edmsyn)
edmtree.fetch('new')
library(edmsyn)
library(edmsyn)
tada()
document()
getwd()
setwd('edmsyn')
document()
library(edmsyn)
tada()
library(edmsyn)
tada()
edmtree.fetch('new')
new
edmtree.fetch('c')
document()
library(edmsyn)
edmtree.fetch('new')
p <- pars(students = 3)
node.name = 'new'
tell = c('students')
gen = list(c('students'), c('M'))
f.tell = function(x){return(x/2)}
f.tell = function(x){return(list(x/2))}
f.gen = list(function(x){x*2}, function(x){ncol(x)*2})
edmtree.add(node.name, tell, gen, f.tell, f.gen)
get.par('new',p)
get.par('new',p,progress = TRUE)
library(edmsyn)
names(pars())
library(edmsyn)
names(pars())
library(edmsyn)
library(edmsyn)
names(pars())
get.par('new',p)
a = list()
a[[3]]
a[['hey']]
getwd()
document()
library(edmsyn)
library(edmsyn)
pars()
length(pars())
get.par('new',p)
p
p
p <- pars()
p
p
get.pars('new',p)
get.par('M',pars(concepts =4, students = 5))
get.par('M',pars(concepts =4, students = 5))
edmtree.fetch
edmtree.fetch('M')
library(edmsyn)
names(pars())
p <- pars(students = 3, concepts = 4, items = 5)
p <- get.par('M', p)$context
p
names(p)
length(p)
p$concepts.exp
p$concept.exp
p$concepts
node.name
edmtree.add(node.name, tell, gen, f.tell, f.tell)
library(edmsyn)
edmtree.add(node.name, tell, gen, f.tell, f.gen)
p
pars()
pars(new = 6)
library(edmsyn)
edmtree.fetch('new')
edmtree.add(node.name, tell, gen, f.tell, f.gen)
edmtree.fetch('new')
pars(new = 12)
p <- pars(new = 12)
p
f <- function(...){print(as.list(environment()))}
f(1)
f(hey = 1)
f <- function(tada){print(as.list(environment()))}
f
f()
f <- function(tada = 1, ...){print(as.list(match.call(expand.dots = FALSE)))}
f()
f(tada = 1)
f <- function(tada = 1, new = 1){print(as.list(match.call(expand.dots = FALSE)))}
f <- function(tada = 1, ...){print(as.list(match.call(expand.dots = FALSE)))}
f(1, new = 1)
f <- function(tada = 1, ...){print(as.list(match.call(expand.dots = TRUE)))}
f(1, new = 1)
a = list(hey = 1)
a[c("hey", "t")] = list(2,3)
a
f(1, new = 1)
a
a$tada
a['tada']
a$init.vals
is.null(a$init.vals)
a$init.vals <- init()
a
function(a = 1, b=2) {print(as.list(environment()))}
x <- function(a = 1, b=2) {print(as.list(environment()))}
x()
a
a = list(hey = 1, tada = 2, foo = 3, bar = 4)
a[c(1,2,3)]
a[c(1,2,4)]
which(c(T,F,F,T))
library(edmsyn)
pars()
a
a[[5]] <<- as.integer(a[[5]])
library(edmsyn)
source('~/edmsyn/R/structure.R')
pars()
library(edmsyn)
pars()
library(edmsyn)
pars()
library(edmsyn)
pars()
library(edmsyn)
pars()
library(edmsyn)
getwd()
document()
library(roxygen2)
library(dev)
library(devtools)
document()
setwd('..')
install('edmsyn')
rm(list=ls())
library(edmsyn)
pars()
install(edmsyn)
install('edmsyn')
install('edmsyn')
pars()
install('edmsyn')
pars()
install('edmsyn')
pars()
pars(students = 1)
install('edmsyn')
pars(students = 1)
pars()
install('edmsyn')
install('edmsyn')
pars()
install('edmsyn')
pars()
pars(students = 1)
pars(students = 1, items = 2)
p <- pars(students = 2, items = 1)
pars(p, students = 3, items = NULL, concepts = 4, new = 5)
install('edmsyn')
p <- pars(students = 2, items = 1)
pars(p, students = 3, items = NULL, concepts = 4, new = 5)
pars(p, students = 3, items = NULL, concepts = 4)
p <- pars(students = 2, items = 1)
p
pars(p, students = 3, items = NULL, concepts = 4)
install('edmsyn')
p <- pars(students = 2, items = 1)
p
pars(p, students = 3, items = NULL, concepts = 4)
install('edmsyn')
p <- pars(students = 2, items = 1)
p
pars(p, students = 3, items = NULL, concepts = 4)
