get.par('new',p)
library(edmsyn)
get.par('new',p)
edmtree.add(node.name, tell,gen, f.tell, f.gen)
get.par('new',p)
p
names(p)
get.par('new',p)
get.par('hey',p)
rm(list = ls())
library(edmsyn)
p <- pars(students = 3)
get.par('new',p)
get.par('hey',p)
get.par('new',p)
get.par('hey',p)
get.par('trieu',p)
get.par('new',p)
edmtree.fetch('new')
edmtree.fetch('trieu')
rm(list = ls())
library(edmsyn)
rm(list = ls)
rm(list = ls())
node.name
library(edmtree)
library(edmsyn)
edmtree.fetch('new')
library(edmsyn)
library(edmsyn)
tada()
document()
getwd()
setwd('edmsyn')
document()
library(edmsyn)
tada()
library(edmsyn)
tada()
edmtree.fetch('new')
new
edmtree.fetch('c')
document()
library(edmsyn)
edmtree.fetch('new')
p <- pars(students = 3)
node.name = 'new'
tell = c('students')
gen = list(c('students'), c('M'))
f.tell = function(x){return(x/2)}
f.tell = function(x){return(list(x/2))}
f.gen = list(function(x){x*2}, function(x){ncol(x)*2})
edmtree.add(node.name, tell, gen, f.tell, f.gen)
get.par('new',p)
get.par('new',p,progress = TRUE)
library(edmsyn)
names(pars())
library(edmsyn)
names(pars())
library(edmsyn)
library(edmsyn)
names(pars())
get.par('new',p)
a = list()
a[[3]]
a[['hey']]
getwd()
document()
library(edmsyn)
library(edmsyn)
pars()
length(pars())
get.par('new',p)
p
p
p <- pars()
p
p
get.pars('new',p)
get.par('M',pars(concepts =4, students = 5))
get.par('M',pars(concepts =4, students = 5))
edmtree.fetch
edmtree.fetch('M')
library(edmsyn)
names(pars())
p <- pars(students = 3, concepts = 4, items = 5)
p <- get.par('M', p)$context
p
names(p)
length(p)
p$concepts.exp
p$concept.exp
p$concepts
node.name
edmtree.add(node.name, tell, gen, f.tell, f.tell)
library(edmsyn)
edmtree.add(node.name, tell, gen, f.tell, f.gen)
p
pars()
pars(new = 6)
library(edmsyn)
edmtree.fetch('new')
edmtree.add(node.name, tell, gen, f.tell, f.gen)
edmtree.fetch('new')
pars(new = 12)
p <- pars(new = 12)
p
f <- function(...){print(as.list(environment()))}
f(1)
f(hey = 1)
f <- function(tada){print(as.list(environment()))}
f
f()
f <- function(tada = 1, ...){print(as.list(match.call(expand.dots = FALSE)))}
f()
f(tada = 1)
f <- function(tada = 1, new = 1){print(as.list(match.call(expand.dots = FALSE)))}
f <- function(tada = 1, ...){print(as.list(match.call(expand.dots = FALSE)))}
f(1, new = 1)
f <- function(tada = 1, ...){print(as.list(match.call(expand.dots = TRUE)))}
f(1, new = 1)
a = list(hey = 1)
a[c("hey", "t")] = list(2,3)
a
f(1, new = 1)
a
a$tada
a['tada']
a$init.vals
is.null(a$init.vals)
a$init.vals <- init()
a
function(a = 1, b=2) {print(as.list(environment()))}
x <- function(a = 1, b=2) {print(as.list(environment()))}
x()
a
a = list(hey = 1, tada = 2, foo = 3, bar = 4)
a[c(1,2,3)]
a[c(1,2,4)]
which(c(T,F,F,T))
library(edmsyn)
pars()
a
a[[5]] <<- as.integer(a[[5]])
library(edmsyn)
source('~/edmsyn/R/structure.R')
pars()
library(edmsyn)
pars()
library(edmsyn)
pars()
library(edmsyn)
pars()
library(edmsyn)
pars()
library(edmsyn)
getwd()
document()
library(roxygen2)
library(dev)
library(devtools)
document()
setwd('..')
install('edmsyn')
rm(list=ls())
library(edmsyn)
pars()
install(edmsyn)
install('edmsyn')
install('edmsyn')
pars()
install('edmsyn')
pars()
install('edmsyn')
pars()
pars(students = 1)
install('edmsyn')
pars(students = 1)
pars()
install('edmsyn')
install('edmsyn')
pars()
install('edmsyn')
pars()
pars(students = 1)
pars(students = 1, items = 2)
p <- pars(students = 2, items = 1)
pars(p, students = 3, items = NULL, concepts = 4, new = 5)
install('edmsyn')
p <- pars(students = 2, items = 1)
pars(p, students = 3, items = NULL, concepts = 4, new = 5)
pars(p, students = 3, items = NULL, concepts = 4)
p <- pars(students = 2, items = 1)
p
pars(p, students = 3, items = NULL, concepts = 4)
install('edmsyn')
p <- pars(students = 2, items = 1)
p
pars(p, students = 3, items = NULL, concepts = 4)
install('edmsyn')
p <- pars(students = 2, items = 1)
p
pars(p, students = 3, items = NULL, concepts = 4)
library(edmsyn)
library(roxygen2)
library(devtools)
document()
getwd()
setwd('..')
install('edmsyn')
library(edmsyn)
node.name = 'new'
tell = c('students')
tell = c('students_')
gen = list(c('students'), c('M_'))
f.tell = function(x){return(x/2)}
f.gen = list(function(x){return(x*2)}, function(x){return(ncol(x))})
edmtree.add(node.name, tell, gen, f.tell, f.gen)
tell = c('students')
edmtree.add(node.name, tell, gen, f.tell, f.gen)
gen = list(c('students'), c('M'))
edmtree.add(node.name, tell, gen, f.tell, f.gen)
p = pars(concepts = 3)
p
p$concepts
get.par('new',p)
p = pars(p,students = 4)
get.par('new',p)
p = pars(p, students = NULL)
get.par('new',p)
p = pars(p, M = matrix(1,3,4))
matrix(1,3,4)
p
p_ = pars(M = matrix(1,3,4))
library(edmsyn)
p_ = pars(M = matrix(1,3,4))
matrix(1,3,4)
p_ = pars(M = matrix(1,3,4))
library(edmsyn)
p_ = pars(M = matrix(1,3,4))
?call
library(edmsyn)
p_ = pars(M = matrix(1,3,4))
library(edmsyn)
p_ = pars(M = matrix(1,3,4))
a = function(x) {print(as.list(match.call()))}
a(x = matrix(1,3,4))
a = function(x, ...) {print(as.list(environment()))}
a(x = 1, new = 2)
a = function(x, ...) {print(as.list(environment()))}
?environment
a(x = 1)
a = function(x, ...) {print(as.list(match.call())}
a = function(x, ...) {print(as.list(match.call()))}
a(x=1)
a(x=matrix(1,3,4))
a(x=matrix(1,3,4))
a = function(x, ...) {print(as.list(match.call()))}
x = a(x=matrix(1,3,4))
x
x$x
x <- x$x
x
x
call(x)
do.call(x)
as.list(x)
as.function('sapply')
?as.function
x
as.call(x)
as.function(x)
x
a
a = function(x, ...) {as.list(match.call())}
a(x=1)
a(x = matrix(data = 1, nrow = 3, ncol = 4 ))
x <- a(x = matrix(data = 1, nrow = 3, ncol = 4 ))$x
x
do.call(x)
as.list(x)
as.list(x)[[1]]
class(as.list(x)[[1]])
do.call(x[[1]],x[2:])
x[2:]
x
x <- as.list(x)
do.call(x[[1]],x[2:])
x
do.call(x[[1]],x[2:length(x)])
do.call(as.character(x[[1]]),x[2:length(x)])
pars(3)
pars(p,3)
pars(p,3)
a
a(1)
a(1,2)
names(a(1,2))
library(edmsyn)
pars(M = matrix(1,3,4))
p <- pars(M = matrix(1,3,4))
p
p$M
p <- pars(students = 4, new = 8)
edmtree.add(node.name, tell, gen, f.tell, f.gen)
f.gen
f.gen[[2]] <- function(x){return(ncol(x)*2)}
edmtree.add(node.name, tell, gen, f.tell, f.gen)
p <- pars(new = 8, students = 3)
p <- pars(new = 8, students = 4)
p <- pars(pars(M = matrix(data = 1, nrow = 3, ncol = 4)), new = 8)
p
p$M
p$students
p$new
p <- pars(pars(pars(concetps = 4),M = matrix(data = 1, nrow = 3, ncol = 4)), new = 8)
p <- pars(pars(pars(concepts = 4),M = matrix(data = 1, nrow = 3, ncol = 4)), new = 8)
pars(concepts = 4)
p <- pars(pars(pars(concepts = 4),M = matrix(data = 1, nrow = 3, ncol = 4)), new = 8)
pars(concepts = 4)
p <- pars(pars(pars(),M = matrix(data = 1, nrow = 3, ncol = 4)), new = 8)
p
p <- pars(pars(pars(students = 3),M = matrix(data = 1, nrow = 3, ncol = 4)), new = 8)
p <- pars(pars(pars(students = 4),M = matrix(data = 1, nrow = 3, ncol = 4)), new = 8)
p
p <- pars(pars(pars(items = 4),M = matrix(data = 1, nrow = 3, ncol = 4)), new = 8)
p
p <- pars(pars(pars(concepts = 4),M = matrix(data = 1, nrow = 3, ncol = 4)), new = 8)
p <- pars(pars(pars(concepts = sum(c(1,2))),M = matrix(data = 1, nrow = 3, ncol = 4)), new = 8)
sum(c(1,2))
library(edmsyn)
p <- pars(pars(pars(concepts = sum(c(1,2))),M = matrix(data = 1, nrow = 3, ncol = 4)), new = 8)
edmtree.add(node.name, tell, gen, f.tell, f.gen)
p <- pars(pars(pars(concepts = sum(c(1,2))),M = matrix(data = 1, nrow = 3, ncol = 4)), new = 8)
p
p <- pars(pars(pars(concepts = sum(c(1,sum(c(1,1))))),M = matrix(data = 1, nrow = 3, ncol = 4)), new = 8)
p
p$concepts
p <- pars(tada = 4)
pars(students = 12)
pars(students = 12)$students
pars(students = 1+2)$students
pars(students = sum(c(1,2)))$students
abc = 1
pars(students = abc)
a
a <- function(x, ...) {as.list(environment())}
a(x=1)
a(x=1, new = 2)
a(x=1, new = 2, t = 3)
a(x=abc)
a = function(x, ...) {as.list(match.call())}
a = function(x, ...) {names(as.list(match.call()))}
a(x=1,new =2)
a = function(x, ...) {names(as.list(match.call()))[2:]}
a = function(x, ...) {names(as.list(match.call()))}
a = function(x, ...) {}
a = function(x, ...) {
t = names(as.list(match.call()))
t[2:]
a = function(x, ...) {
t = names(as.list(match.call()))
t[2:length(t)]
}
a(x=2, y=1)
a = function(x, ...) {
t = names(as.list(match.call()))
t = t[2:length(t)]
for (i in 1:length(t)){}
}
a = []
a = list()
a
a.append(1)
append(a,1)
source('~/edmsyn/R/container.R')
a(x=1,y=2)
?deparse
abc = 1
abc
deparse(abc)
source('~/edmsyn/R/container.R')
a(x=1,y=2)
source('~/edmsyn/R/container.R')
source('~/edmsyn/R/container.R')
a(x=1,y=2)
a(x=1, y=abc)
append(list(1,2,3),list(4,5,6))
append(list(a=1,b=2),list(c=1,b=3))
unique(list(1,2,3,4))
unique(list(1,2,3,4,4))
list(a=1,b=2,b=3)
a <- list(a=1, b=2, b=3)
a[c('a','b')]
source('~/edmsyn/R/container.R')
a(x=1, y=2, x=3)
a(x=1, y=2, y=3)
unique(a(x=1, y=2, y=3))
a(x=1, y=2, y=3)
source('~/edmsyn/R/container.R')
names(list())
a[NULL] <- 1
a = list()
a[NULL] <- 1
a
a = list(1,2,3)
a[NULL] <- 1
a
a = list(a = 1, b=2, c=3)
a
a = list(a = 1, b=2, b=3)
names(a)
unique(names(a))
names(list())
source('~/edmsyn/R/container.R')
a(x=1)
a(x=1,y=2)
a(x=1,y=sum(c(1,2,3)),z=abc)
library(edmsyn)
pars(students = 3)
library(edmsyn)
pars(students = 3)
pars(concepts = 3)
edmtree.add(new.node, tell, gen, f.tell, f.gen)
new.node
tell
gen
new.node = 'new'
edmtree.add(new.node, tell, gen, f.tell, f.gen)
p <- pars(pars(pars(concepts = sum(c(abc,2))),items=4, new = 8),M = matrix(data = 1, nrow = 3, ncol = 4))
p
p$concepts
p$items
p$students
p$M
get.par('new',p)
library(edmsyn)
pars()
pars(new=8)
1/12
library(roxygen2)
library(devtools)
document()
document()
setwd('..')
install('edmsyn')
init()
pars()
pars()
install('edmsyn')
pars()
init()
library(edmsyn)
init()
library(edmsyn)
init()
init(new = 0.8)
library(edmsyn)
init()
init(new = 0.8)
library(edmsyn)
init(new = 0.8)
pars()
pars()$init.vals
init(alpha.c = NULL)
init(alpha.c = LOL)
init(alpha.c = 0.25, trieu = 1)
library(edmsyn)
init()
gen('exp',pars(students = 4, items = 5))
gen('exp',pars(students = 4, items = 5))$avg.success
init()$avg.success
class(init())
init()['avg.success']
init()$avg.success
init()[['hey']]
init()[['avg.success']]
init$trieu
a <- init(tada = NULL)
a
library(edmsyn)
a <- init(tada = NULL)
a <- init(tada = NULL)
library(edmsyn)
a <- init(tada = NULL)
init()
class(init())
message('hey')
list(NULL)
length(list(NULL))
library(edmsyn)
init()
?sum
library(document())
library(roxygen2)
library(devtools)
document()
setwd('..')
install('edmsyn')
setwd('edmsyn')
document()
setwd('..')
install('edmsyn')
c('hey',3)
c('hey', matrix(1,3,3))
list(1,2,3)
as.array(l)
l <- list(1,2,3)
as.array(l)
l
as.integer(l)
as.character(l)
